---
import { Icon } from "astro-icon/components";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Login">
  <main>
    <div id="login-container">
      <a href="/" id="return-homepage">
        <Icon size={24} name="fa6-solid:arrow-right-from-bracket" /> Return to Homepage
      </a>
      <h1>Login.</h1>
      <form id="form">
        <div class="input-row">
          <Icon size={24} name="fa6-solid:envelope" />
          <input
            type="email"
            id="email"
            name="email"
            placeholder="Email"
            required
          />
        </div>
        <div class="input-row">
          <Icon size={24} name="fa6-solid:lock" />
          <input
            type="password"
            id="password"
            name="password"
            placeholder="Password"
            required
          />
        </div>
        <div id="forgot-password">
          <a href="/forgot-password">Forgot password?</a>
        </div>
        <button type="submit">Login</button>
        <div id="register">
          <p>Not registered yet?</p>
          <a href="/register">Register here</a>
        </div>
      </form>
    </div>
  </main>
</Layout>

<script>
  import {
    sendEmailVerification,
    signInWithEmailAndPassword,
  } from "firebase/auth";
  import { auth, db } from "../firebase";
  import { doc, getDoc } from "firebase/firestore";
  import Swal from "sweetalert2";

  document.querySelector("#form")?.addEventListener("submit", (e) => {
    e.preventDefault();
    const email = (document.querySelector("#email") as HTMLInputElement).value;
    const password = (document.querySelector("#password") as HTMLInputElement).value;

    Swal.fire({
      title: 'Logging in...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    signInWithEmailAndPassword(auth, email, password)
      .then((userCredential) => {
        const user = userCredential.user;

        getDoc(doc(db, "participant", user.uid))
          .then((ref) => {
            if (ref.exists()) {
              if (!user.emailVerified) {
                sendEmailVerification(user)
                  .then(() => {
                    Swal.fire({
                      icon: 'info',
                      title: 'Verification email sent',
                      text: 'Please verify your email before logging in.',
                    });
                  })
                  .catch((error) => {
                    console.log("Error sending verification email:", error);
                    Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: `Error sending verification email: ${error.message}`,
                    });
                  });
              } else {
                window.location.href = "/participant-dashboard";
              }
            } else {
              getDoc(doc(db, "judges", user.uid))
                .then((ref) => {
                  if (ref.exists()) {
                    window.location.href = "/judge-dashboard";
                  } else {
                    getDoc(doc(db, "admin", user.uid))
                      .then((ref) => {
                        if (ref.exists()) {
                          window.location.href = "/admin";
                        } else {
                          Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'User not found.',
                          });
                        }
                      })
                      .catch((error) => {
                        console.log("Error getting document:", error);
                        Swal.fire({
                          icon: 'error',
                          title: 'Error',
                          text: `Error getting document: ${error.message}`,
                        });
                      });
                  }
                })
                .catch((error) => {
                  console.log("Error getting document:", error);
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: `Error getting document: ${error.message}`,
                  });
                });
            }
          })
          .catch((error) => {
            console.log("Error getting document:", error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: `Error getting document: ${error.message}`,
            });
          });
      })
      .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        if (errorCode === "auth/invalid-credential") {
          Swal.fire({
            icon: 'error',
            title: 'Invalid email or password',
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: errorMessage,
          });
        }
        console.log(errorCode, errorMessage);
      });
  });
</script>

<style>
  body {
    background-color: #433f6c;
  }

  p {
    margin: 0;
  }

  a {
    color: #a4a4a4;
    font-weight: 300;
    text-decoration: none;
  }

  #forgot-password a {
    text-align: right;
    display: block;
  }

  main {
    min-height: 100vh;
    display: flex;
    justify-self: center;
    align-self: center;
    justify-content: center;
  }

  .input-row {
    display: flex;
    gap: 16px;
    align-items: center;
  }

  #return-homepage {
    color: #a4a4a4;
    display: flex;
    gap: 12px;
    align-items: center;
    font-weight: 300;
    width: fit-content;
    margin-bottom: 4px;
  }

  [data-icon] {
    color: #a4a4a4;
  }

  [data-icon="fa6-solid:arrow-right-from-bracket"] {
    transform: rotate(180deg);
  }

  h1 {
    font-weight: 900;
    margin-top: 0;
  }

  #login-container {
    background-color: #faf9f6;
    width: 400px;
    display: flex;
    align-self: center;
    border-radius: 8px;
    padding: 80px 100px;

    flex-direction: column;
  }

  #register {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: small;
  }

  #register p {
    color: #a4a4a4;
  }

  #register a {
    color: #ff8385;
  }

  form {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  input {
    padding: 12px;
    border: 1px solid #a4a4a4;
    border-radius: 8px;
    font-family: inherit;
    font-weight: 300;
    font-size: 16px;
    background-color: inherit;
    height: 14px;
    width: 100%;
  }

  button {
    padding: 8px 12px;
    border: none;
    border-radius: 8px;
    font-family: inherit;
    font-weight: 300;
    font-size: 20px;
    background-color: #433f6c;
    color: #faf9f6;
    cursor: pointer;
    margin-top: 24px;
  }
</style>
